<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />

    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        main {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 30px;
            background-color: white;
        }

        section {
            max-width: 400px;
        }

        input, select {
            width: 97%;
            margin: 3px 0px
        }

        .double {
            display: flex;
            justify-content: space-between;
        }
        .double :first-child{
            width: 75%
        }
        .double :last-child {
            width: 20%;
        }

        #zutaten {
            border: 2px solid black;
        }

        #zutaten .zutat {
            display: flex;
            flex-direction: row;
            border-bottom: 2px black solid;
        }
        #zutaten .zutat:last-child {
            border-bottom: none;
        }

        #zutaten .zutat .column {
            display: flex;
            flex-direction: column;
            justify-content: center;
            padding: 10px;
        }

        #zutaten .zutat .bearbeiten-link {
            font-size: 12px;
            color: black;
            text-decoration: none;
        }

        #neu {
            min-width: 300px;
            height: 50px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        #neu:hover{
            cursor: pointer;
        }

        span.material-symbols-outlined:hover {
            cursor: pointer;
            filter: opacity(0.6);
        }

        #buttons {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
        }
        #buttons button {
            border-radius: 20px;
            border: 2px solid black;
            padding: 2px 13px;
            margin: 0px 10px;
            filter: opacity(0.8);
        }
        #buttons button:hover {
            filter: brightness(0.9);
            cursor: pointer;
        }


    </style>

    <title> Rezept bearbeiten </title>
</head>
<body>

    <main>

        <h1> Rezept bearbeiten </h1>

        <section style="margin-bottom: 40px">
            <table>
                <tr>
                    <th> Name: </th>
                    <td> 
                        <input type="text" id="name" autocomplete="off">
                    </td>
                </tr>
                <tr>
                    <th> Rezept-Art: </th>
                    <td> 
                        <select id="rezept-art"> </select>
                    </td>
                </tr>
                <tr>
                    <th> Menge: </th>
                    <td class="double"> 
                        <input type="text" id="menge" autocomplete="off">
                        <select id="einheit"></select>
                    </td>
                </tr>
            </table>
        </section>

        <h2> Zutaten </h2>

        <section id="zutaten" style="margin-bottom: 40px">
            <div class="zutat" id="neu">
                <span class="material-symbols-outlined" title="Neue Variante Hinzufügen"> add </span>
            </div>
        </section>

        <section id="error" style="margin-bottom: 20px; color: red">
            <p id="error-message"></p>
        </section>

        <section id="buttons" style="padding: 0px 20px">
            <button id="speichern" style="background-color: green"> Speichern </button>
            <button id="abbrechen" style="background-color: orange;"> Abbrechen </button>
            <button id="loeschen" style="background-color: red;"> Löschen </button>
        </section>
        
    </main>

    

    <template id="template">
        <div class="zutat">

            <div class="column">
                <div class="row">
                    <input type="text" class="name" title="Name der Zutat" list="zutaten-liste">
                </div>
                <div class="row">
                    <a class="bearbeiten-link" target="_blank"> In neuem Fenster bearbeiten </a>
                </div>
            </div>

            <div class="column">
                <div class="row double">
                    <input type="number" class="menge" title="Menge der Zutat">
                    <span class="einheit" style="text-align: right"> </span>
                </div>
            </div>

            <div class="column">
                <div class="row">
                    <span class="bearbeiten material-symbols-outlined" title="Bearbeiten"> edit </span>
                </div>
                <div class="row">
                    <span class="entfernen material-symbols-outlined" title="Entfernen"> delete </span>
                </div>
            </div>

        </div>
    </template>

    <datalist id="zutaten-liste"> </datalist>

    <script>
        window.onload = () => {
            let search = new URLSearchParams(location.search)
            let id = search.get("id")

            fillDaten(id)

            document.getElementById("neu").addEventListener("click", async () => {
                neueZutat()
            })

            document.getElementById("speichern").addEventListener("click", e => {
                speichern(id)
            })

            document.getElementById("abbrechen").addEventListener("click", e => {
                abbrechen()
            })

            document.getElementById("loeschen").addEventListener("click", e => {
                loeschen(id)
            })
        }

        function neueZutat() {
            cloneTemplate({
                id: null,
                name: null,
                menge: 0,
                einheit: "St.",
                ist_zutat: false
            }, false)
        }

        async function fillDaten(id) {
            if(id == null || isNaN(id)) {
                return
            }

            let res = await fetch(`/api/rezept/${id}`, {
                method: "GET"
            })

            if(res.ok) {
                let body = await res.json()

                body.einheit.forEach(e => {
                    let opt = document.createElement("option")
                    opt.innerText = e.name
                    opt.value = e.id
                    
                    document.getElementById("einheit").appendChild(opt)
                })

                body.rezeptArt.forEach(e => {
                    let opt = document.createElement("option")
                    opt.innerText = e.name
                    opt.value = e.id
                    
                    document.getElementById("rezept-art").appendChild(opt)
                })

                body.zutatenOptional.forEach(z => {
                    let opt = document.createElement("option")
                    opt.value = z.name
                    opt.dataset.json = encodeURI( JSON.stringify(z) )

                    document.getElementById("zutaten-liste").appendChild(opt)
                })

                document.getElementById("name").value = body.rezept.name
                document.getElementById("menge").value = body.rezept.menge
                document.getElementById("einheit").value = body.rezept.einheit_id
                document.getElementById("rezept-art").value = body.rezept.rezept_art_id

                body.zutaten.forEach(z => {
                    cloneTemplate(z, true)
                })
            }
        }
        
        function cloneTemplate(daten, disabled) {
            let template = document.getElementById("template")
            let t = document.importNode(template.content, true)

            t.querySelector(".name").value = daten.name
            t.querySelector(".menge").value = daten.menge
            t.querySelector(".einheit").innerText = daten.einheit

            console.log(daten)

            if(daten.ist_zutat) {
                t.querySelector(".bearbeiten-link").href = `/zutat/bearbeiten?id=${daten.id}`
            } else {
                t.querySelector(".bearbeiten-link").href = `/rezept/bearbeiten?id=${daten.id}`
            }

            if(disabled) {
                t.querySelectorAll("input, select").forEach(i => {
                    i.disabled = true
                })
            }
            
            t.querySelector(".entfernen").addEventListener("click", e => {
                let div = e.target.parentElement.parentElement.parentElement
                entfernen(div)
            })
            t.querySelector(".bearbeiten").addEventListener("click", e => {
                let div = e.target.parentElement.parentElement.parentElement
                bearbeiten(div)
            })
            t.querySelector(".name").addEventListener("change", e => {
                let div = e.target.parentElement.parentElement.parentElement
                updateZutatDaten(div)
            })

            document.getElementById("zutaten").insertBefore(
                t,
                document.getElementById("neu")
            )
        }

        function bearbeiten(div) {
            div.querySelectorAll("input, select").forEach(i => {
                i.disabled = false
            })
        }

        function entfernen(div) {
            document.getElementById("zutaten").removeChild(div)
        }

        function updateZutatDaten(div) {
            let name = div.querySelector(".name").value

            for(let opt of document.getElementById("zutaten-liste").children) {
                let json = JSON.parse( decodeURI(opt.dataset.json) )
                
                if(json.name == name) {
                    div.querySelector(".einheit").innerText = json.einheit

                    if(json.ist_zutat) {
                        div.querySelector(".bearbeiten-link").href = `/zutat/bearbeiten?id=${json.id}`
                    } else {
                        div.querySelector(".bearbeiten-link").href = `/rezept/bearbeiten?id=${json.id}`
                    }

                    break
                }
            }
        }

        async function speichern(id) {
            if(id == null || isNaN(id)) {
                return
            }

            let input = parseInput()

            let error = returnErrorMessage(input)
            if(error != null) {
                status("error", error)
                console.error(error)
                return
            }

            status("clear")
            console.log(input)
            
            let res = await fetch(`/api/rezept/${id}`, {
                method: "POST",
                body: JSON.stringify(input),
                headers: {
                    "Content-Type": "application/json"
                }
            })
            if(res.ok) {
                status("success", "Rezept wurde erfolgreich gespeichert.")
                setTimeout( () => {
                    location.assign("/rezept")
                }, 2000)
            } else {
                status("error", await res.text())
            }
        }

        function parseInput() {
            let zutaten = []
            for(let z of document.getElementById("zutaten").children) {
                if(z.id != "neu") {
                    zutaten.push({
                        name: z.querySelector(".name").value,
                        menge: z.querySelector(".menge").value
                    })
                }
            }

            return {
                rezept: {
                    name: document.getElementById("name").value,
                    menge: document.getElementById("menge").value,
                    einheit_id: document.getElementById("einheit").value,
                    rezept_art_id: document.getElementById("rezept-art").value,
                },
                zutaten
            }
        }

        function returnErrorMessage(input) {
            if(input.rezept.name == "") {
                return "Name darf nicht leer sein."
            }

            if(input.rezept.menge == "") {
                return "Menge darf nicht leer sein."
            }
            if(isNaN(input.rezept.menge)) {
                return "Menge muss eine Zahl sein."
            }
            if(input.rezept.menge < 0) {
                return "Menge darf nicht kleiner als 0 sein"
            }

            let anteil = 0

            for(let z of input.zutaten) {
                if(z.name == "") {
                    return "Name einer Zutat darf nicht leer sein."
                }
                if(z.menge == "") {
                    return `Menge der Zutat '${z.name}' darf nicht leer sein.`
                }
            }

            return null
        }

        function status(status, text="") {
            let p = document.getElementById("error-message")
            
            if(status == "clear") {
                p.innerText = null
            } else if(status == "success") {
                p.style.color = "green"
                p.innerText = text
            } else if(status == "error") {
                p.style.color = "red"
                p.innerText = text
            }

        }

        function abbrechen() {
            if(!confirm("Alle Änderungen verwerfen?")) return

            location.assign("/rezept")
        }

        async function loeschen(id) {
            if(!confirm("Dieses Rezept Löschen?")) return

            let res = await fetch(`/api/rezept/${id}`, {
                method: "DELETE"
            })
            if(res.ok) {
                status("success", "Rezept wurde erfolgreich gelöscht.")
                setTimeout( () => {
                    location.assign("/rezept")
                }, 2000)
            } else {
                status("error", await res.text())
            }
        }
    </script>
    
</body>
</html>